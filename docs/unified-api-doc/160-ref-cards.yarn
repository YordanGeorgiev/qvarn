`/cards`
-----------------

This resource manages identification cards.

Synopsis:

* `GET /cards` --- get a list of ids of all cards
* `POST /cards` --- add a new card
* `GET /cards/<id>` --- get the information about a specific card
* `PUT /cards/<id>` --- replace the information for a card
* `DELETE /cards/<id>` --- remove a card

Errors:

* There are no errors that are specific to this resource.

Example result for a card:

    EXAMPLE
    {
        "type": "card",
        "id": "1234",
        "card_type": "VALTTI",
        "card_ids": [
            {
                "card_id_type": "uid",
                "card_id": "1",
            },
            {
                "card_id_type": "barcode_id",
                "card_id": "1",
            }
        ],
        "issued_date": "2015-04-01",
        "valid_until_date": null,
        "card_status_history": [
            {
                "card_status": "NotConfirmed",
                "modified_by": "123",
                "modified_timestamp": "2015-02-25T12:13:14+0200",
                "modification_reason": "NewCard"
                "modification_description": "M. didn't want to activate card yet"
            }
        ],
        "org": "4444",
        "person": "7777"
    }

Fields in the result:

* `card_type` --- type of card; must be `VALTTI` for now
* `card_ids` --- the various unique identifiers for the card
    - `card_id_type` --- type of card id; one of `uid`, `barcode_id`
    - `card_id` --- the card id
* `issued_date` --- date when issued
* `valid_until_date` --- last date when card is valid
* `card_status_history` --- history status of the card; the last entry
  in the list is the current status. Each entry in the list has the
  following fields:
    - `card_status` --- status of the card; one of the following:
        - `NotConfirmed` --- card has not been confirmed yet, and should
          not be used
        - `Active` --- card is active, and may be used
        - `Closed` --- card has been closed, and should not be used
        - `Expired` --- card has expired, and should not be used
    - `modified_by` --- the `/persons` id of the person who added the
      card (new cards) or changed the card status
    - `modified_timestamp` --- timestamp of when the modification was
      made (set by the backend, not the API client)
    - `modification_reason` --- reason for the modification; one of
      the following values:
        - `NewCard` --- a new card was created
        - `CardClosed` --- card was closed
        - `CardLost` --- card was lost
        - `CardError` --- other error
* `org` --- identifier of the organisation who issued the card
* `person` --- identifier of the person for whom the card was issued


### Tests

We create a new card, update them, and delete them.

    SCENARIO manage a card

Client has needed access rights for cards resource.

    GIVEN client has access to scopes
    ... "uapi_cards_post uapi_cards_get uapi_cards_id_get uapi_cards_id_put
    ...  uapi_cards_id_delete"

Try to create a new card, but with invalid data. These must all fail.
First, an empty record:

    WHEN client POSTs /cards with {}
    THEN HTTP status code is 400

Only specific fields are allowed. Test with an invalid field.

    WHEN client POSTs /cards with {"invalid_field": true}
    THEN HTTP status code is 400

The only mandatory field is `card_type`. Records without that field
must fail.

    WHEN client POSTs /cards with {"issued_date": "2015-04-20"}
    THEN HTTP status code is 400

Create a new card.

    WHEN client POSTs /cards with
    ... {"card_type": "VALTTI",
    ...  "card_ids": [
    ...    {
    ...        "card_id_type": "uid",
    ...	       "card_id": "1"
    ...    },
    ...    {
    ...        "card_id_type": "barcode_id",
    ...	       "card_id": "1"
    ...    }
    ...   ],
    ...  "issued_date": "2015-04-01",
    ...  "valid_until_date": null,
    ...  "card_status_history": [
    ...    {
    ...        "card_status": "NotConfirmed",
    ...	       "modified_by": "123",
    ...	       "modified_timestamp": "2015-02-25T12:13:14+0200",
    ...	       "modification_reason": "NewCard",
    ...	       "modification_description": "M. didn't want to activate card yet"
    ...    }
    ...   ],
    ...  "org": "4444",
    ...  "person": "7777"
    ... }
    THEN HTTP status code is 201
    AND result matches
    ... {"card_type": "VALTTI",
    ...  "card_ids": [
    ...    {
    ...        "card_id_type": "uid",
    ...	       "card_id": "1"
    ...    },
    ...    {
    ...        "card_id_type": "barcode_id",
    ...	       "card_id": "1"
    ...    }
    ...   ],
    ...  "issued_date": "2015-04-01",
    ...  "valid_until_date": null,
    ...  "card_status_history": [
    ...    {
    ...        "card_status": "NotConfirmed",
    ...	       "modified_by": "123",
    ...	       "modified_timestamp": "2015-02-25T12:13:14+0200",
    ...	       "modification_reason": "NewCard",
    ...	       "modification_description": "M. didn't want to activate card yet"
    ...    }
    ...   ],
    ...  "org": "4444",
    ...  "person": "7777"
    ... }
    AND result has key "id" containing a string, saved as $ID1
    AND HTTP Location header is API_URL/cards/$ID1
    AND result has key "revision" containing a string, saved as $REV1

Check that the record is there.

    WHEN client GETs /cards
    THEN HTTP status code is 200
    AND result has key "resources", a list containing {"id": "$ID1"}

    WHEN client GETs /cards/$ID1
    THEN HTTP status code is 200
    AND result matches
    ... {"card_type": "VALTTI",
    ...  "card_ids": [
    ...    {
    ...        "card_id_type": "uid",
    ...	       "card_id": "1"
    ...    },
    ...    {
    ...        "card_id_type": "barcode_id",
    ...	       "card_id": "1"
    ...    }
    ...   ],
    ...  "issued_date": "2015-04-01",
    ...  "valid_until_date": null,
    ...  "card_status_history": [
    ...    {
    ...        "card_status": "NotConfirmed",
    ...	       "modified_by": "123",
    ...	       "modified_timestamp": "2015-02-25T12:13:14+0200",
    ...	       "modification_reason": "NewCard",
    ...	       "modification_description": "M. didn't want to activate card yet"
    ...    }
    ...   ],
    ...  "org": "4444",
    ...  "person": "7777"
    ... }
    AND result has key "id" containing a string, saved as $ID1

Update the record.

    WHEN client PUTs /cards/$ID1 with
    ... {"revision": "$REV1",
    ...  "card_type": "VALTTI",
    ...  "card_ids": [
    ...    {
    ...        "card_id_type": "uid",
    ...	       "card_id": "1"
    ...    },
    ...    {
    ...        "card_id_type": "barcode_id",
    ...	       "card_id": "1"
    ...    }
    ...   ],
    ...  "issued_date": "2015-04-01",
    ...  "valid_until_date": "2016-04-01",
    ...  "card_status_history": [
    ...    {
    ...        "card_status": "NotConfirmed",
    ...	       "modified_by": "123",
    ...	       "modified_timestamp": "2015-02-25T12:13:14+0200",
    ...	       "modification_reason": "NewCard",
    ...	       "modification_description": "M. didn't want to activate card yet"
    ...    }
    ...   ],
    ...  "org": "4444",
    ...  "person": "7777"
    ... }
    THEN HTTP status code is 200
    AND result matches {"valid_until_date": "2016-04-01"}
    AND result has key "id" containing a string, saved as $ID2
    AND values "$ID1" and "$ID2" are identical
    AND result has key "revision" containing a string, saved as $REV2

Delete the record.

    WHEN client DELETEs /cards/$ID1
    THEN HTTP status code is 200

    WHEN client GETs /cards/$ID1
    THEN HTTP status code is 404
