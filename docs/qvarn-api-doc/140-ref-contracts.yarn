<!--
Copyright 2015, 2016 Suomen Tilaajavastuu Oy

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->


`/contracts`
---------------------

This resource manages various types of contracts between organisations
and persons. A contract can be of any type: a contract to supply
services on a construction site; employment; or similar. All the types
are collected into one resource type to avoid an explosion in the
types of resources.

Synopsis:

* `GET /contracts` --- get a list of ids of all contracts
* `POST /contracts` --- add a new contract
* `GET /contracts/<id>` --- get the information about a specific contract
* `GET /contracts/<id>/document` --- get the attached document for a specific
  contract
* `PUT /contracts/<id>` --- replace the information for a contract
* `PUT /contracts/<id>/document` --- replace the attached document for a
  contract
* `DELETE /contracts/<id>` --- remove a contract

Errors:

* There are no errors that are specific to this resource.

Possible contract documentation can be stored as attachments to contracts.
The attached documentation is accessed separately.

Example result for a contract:

    EXAMPLE An example of an employment contract
    {
        "type": "contract",
        "id": "1234",
        "contract_type": "employment",
	"start_date": "2015-03-01",
	"end_date": "2015-08-31",
        "contract_parties": [
            {
                "type": "org",
                "resource_id": "123",
                "role": "employer",
            },
            {
                "type": "person",
                "resource_id": "7",
                "role": "employee"
            }
        ],
        "right_to_work_based_on": "eea_citizen",
	"contract_state": "active"
    }

Fields in the result:

* `contract_type` --- type of the contract, one of:
    - `employment` --- an employment contract
    - `induction` --- an induction document between an organisation and
      a person
    - `ID06_cards` --- contract between an ID06 card issuer and
      supplier (see the cards resource for details)
    - `SBCC_account` --- a user account for SBCC service
    - `service_application` --- an application for a service by an
      organisation, applied by a person
* `start_date` --- the date when the contract takes effect
* `end_date` --- ending date of the contract
* `date_created` --- date when the contract was created
* `date_updated` --- date when the contract was last updated
* `contract_parties` --- all parties in the contract, where each party
  is defined by the following fields:
    - `type` --- type of the party, one of `org`, `person`
    - `resource_id` --- identifier of the party
    - `role` --- role in the contract, see below
    - `username` --- username for the service, if this contract is a
    service account contract
    - `user_role` --- name of the user role, if this contract is a
    service account contract
* `right_to_work_based_on` --- basis for a foreign employee's right to
  work, one of:
    - `eea_citizen` --- citizenship of an EU or EEA country
    - `residence_permit` --- an unspecified residence permit
    - `other` --- an unspecified other basis
* `id06_issuer_requires_bankid` --- does the issuer require BankID
  authentication for enabling each virtual ID06 card?
* `id06_contact_name` --- name of ID06 contact person
* `id06_contact_email` --- email address of the ID06 contact person
* `contract_state` --- state of the contract, if applicable
* `contract_state_history` --- state history for the contract; the last
  entry in the list is the current state; see below for list items
* `signers` --- list of signers for the contract; see below for list
  items
* `preferred_language` --- preferred language of communication in cases
  where this contract is a user account contract

Contract parties have a role in which they appear in the contract. The
allowed roles are dependent on the type of contract, as follows:

* `employment` contracts:
    - `employer` --- must be an `org`
    - `employee` --- must be a `person`
* `induction` contracts:
    - `inductor` --- must be an `org`
    - `inductee` --- must be a `person`
* `ID06_cards` contracts:
    - `issuer` --- must be an `org`
    - `supplier` --- must be an `org`
    - `issuer_contact` --- person at issuer responsible for ordering
      ID06 card; must be a `person`
* `SBCC_account` contracts:
    - `user` --- must be a `person`
    - `target` --- must be an `org` or a `person`
* `service_application` contracts:
    - `applicant` --- must be an `org` or a `person`

Contract state history is a list of structures of the following form:

* `state` --- the new state of the contract
* `modified_by` --- must be a `person`
* `modification_timestamp` --- time of the state change

The `signers` list consists of structures of the following form:

* `signer` --- must be a `person`
* `signing_request_timestamp` --- time when the request was sent
* `signing_request_message` --- a custom message for the signer
* `signing_timestamp` --- time when the signer signed the contract

### Tests

We create a new contract, update its info, and delete it.

    SCENARIO manage a contract

Client has needed access rights for contracts resource.

    GIVEN client has access to scopes
    ... "uapi_contracts_post uapi_contracts_id_get uapi_contracts_id_put
    ...  uapi_contracts_id_document_put uapi_contracts_id_document_get
    ...  uapi_contracts_id_delete"

Create a new contract.

    WHEN client POSTs /contracts with
    ... {
    ... "contract_type": "employment",
    ... "start_date": "2013-03-13",
    ... "contract_parties": [
    ...     {
    ...         "type": "org",
    ...         "resource_id": "123",
    ...         "role": "employer"
    ...     },
    ...     {
    ...         "type": "person",
    ...         "resource_id": "7",
    ...         "role": "employee"
    ...     }
    ... ],
    ... "right_to_work_based_on": "eea_citizen",
    ... "contract_state": "active"
    ... }
    THEN HTTP status code is 201
    AND result matches
    ... {
    ... "type": "contract",
    ... "contract_type": "employment",
    ... "start_date": "2013-03-13",
    ... "contract_parties": [
    ...     {
    ...         "type": "org",
    ...         "resource_id": "123",
    ...         "role": "employer"
    ...     },
    ...     {
    ...         "type": "person",
    ...         "resource_id": "7",
    ...         "role": "employee"
    ...     }
    ... ],
    ... "right_to_work_based_on": "eea_citizen",
    ... "contract_state": "active"
    ... }
    AND result has key "id" containing a string, saved as $ID1
    AND HTTP Location header is API_URL/contracts/$ID1
    AND result has key "revision" containing a string, saved as $REV1

Check that the record is there.

    WHEN client GETs /contracts/$ID1
    THEN HTTP status code is 200
    AND result matches
    ... {
    ... "type": "contract",
    ... "contract_type": "employment",
    ... "start_date": "2013-03-13",
    ... "contract_parties": [
    ...     {
    ...         "type": "org",
    ...         "resource_id": "123",
    ...         "role": "employer"
    ...     },
    ...     {
    ...         "type": "person",
    ...         "resource_id": "7",
    ...         "role": "employee"
    ...     }
    ... ],
    ... "right_to_work_based_on": "eea_citizen",
    ... "contract_state": "active"
    ... }
    AND result has key "id" containing a string, saved as $ID2
    AND values "$ID1" and "$ID2" are identical
    AND result has key "revision" containing a string, saved as $REV2
    AND values "$REV1" and "$REV2" are identical

Update the record.

    WHEN client PUTs /contracts/$ID1 with
    ... {
    ... "revision": "$REV1",
    ... "type": "contract",
    ... "contract_type": "employment",
    ... "start_date": "2013-03-13",
    ... "end_date": "2015-10-21",
    ... "contract_parties": [
    ...     {
    ...         "type": "org",
    ...         "resource_id": "123",
    ...         "role": "employer"
    ...     },
    ...     {
    ...         "type": "person",
    ...         "resource_id": "7",
    ...         "role": "employee"
    ...     }
    ... ],
    ... "right_to_work_based_on": "residence_permit"
    ... }
    THEN HTTP status code is 200
    AND result matches
    ... {
    ... "type": "contract",
    ... "contract_type": "employment",
    ... "start_date": "2013-03-13",
    ... "end_date": "2015-10-21",
    ... "contract_parties": [
    ...     {
    ...         "type": "org",
    ...         "resource_id": "123",
    ...         "role": "employer"
    ...     },
    ...     {
    ...         "type": "person",
    ...         "resource_id": "7",
    ...         "role": "employee"
    ...     }
    ... ],
    ... "right_to_work_based_on": "residence_permit"
    ... }
    AND result has key "id" containing a string, saved as $ID3
    AND values "$ID1" and "$ID3" are identical
    AND result has key "revision" containing a string, saved as $REV3

Can not get unsent documentation.

    WHEN client GETs /contracts/$ID1/document
    THEN HTTP status code is 404

Send documentation.

    GIVEN file test.file containing "This pretends to be a pdf"

    WHEN client PUTs file test.file with content type application/pdf
    ...  and revision $REV3 to /contracts/$ID1/document
    THEN HTTP status code is 200

    WHEN client GETs /contracts/$ID1/document
    THEN HTTP status code is 200
    AND HTTP header Content-Type is application/pdf
    AND HTTP header Revision exists
    AND result body matches file test.file

Can not send documentation with no Content-Length header set.

    WHEN client POSTs /contracts with
    ... {
    ... "contract_type": "employment",
    ... "contract_parties": [
    ...     {
    ...         "type": "org",
    ...         "resource_id": "123",
    ...         "role": "employer"
    ...     },
    ...     {
    ...         "type": "person",
    ...         "resource_id": "7",
    ...         "role": "employee"
    ...     }
    ... ],
    ... "right_to_work_based_on": "eea_citizen"
    ... }
    THEN result has key "id" containing a string, saved as $ID4
    AND result has key "revision" containing a string, saved as $REV4

Without request body (no Content-Length header) server responds with status
Length Required 411.

    WHEN client PUTs no file with content type application/pdf
    ...  and revision $REV4 to /contracts/$ID4/document
    THEN HTTP status code is 411

Update the main record, this should not affect the subrecord(s).

    WHEN client GETs /contracts/$ID1
    THEN result has key "revision" containing a string, saved as $REV5

    WHEN client PUTs /contracts/$ID1 with
    ... {
    ... "revision": "$REV5",
    ... "contract_type": "employment",
    ... "contract_parties": [
    ...     {
    ...         "type": "org",
    ...         "resource_id": "123",
    ...         "role": "employer"
    ...     },
    ...     {
    ...         "type": "person",
    ...         "resource_id": "7",
    ...         "role": "employee"
    ...     }
    ... ],
    ... "right_to_work_based_on": "eea_citizen"
    ... }
    THEN HTTP status code is 200
    AND result matches
    ... {
    ... "contract_type": "employment",
    ... "contract_parties": [
    ...     {
    ...         "type": "org",
    ...         "resource_id": "123",
    ...         "role": "employer"
    ...     },
    ...     {
    ...         "type": "person",
    ...         "resource_id": "7",
    ...         "role": "employee"
    ...     }
    ... ],
    ... "right_to_work_based_on": "eea_citizen"
    ... }

    WHEN client GETs /contracts/$ID1/document
    THEN HTTP status code is 200
    AND HTTP header Content-Type is application/pdf
    AND HTTP header Revision exists
    AND result body matches file test.file

Delete the record.

    WHEN client DELETEs /contracts/$ID1
    THEN HTTP status code is 200

    WHEN client GETs /contracts/$ID1
    THEN HTTP status code is 404

Create a new service account contract.

    WHEN client POSTs /contracts with
    ... {
    ... "contract_type": "SBCC_account",
    ... "start_date": "2013-03-13",
    ... "contract_parties": [
    ...     {
    ...         "type": "person",
    ...         "resource_id": "123",
    ...         "role": "user",
    ...		"username": "mrbond",
    ...		"user_role": "secret_agent"
    ...     },
    ...     {
    ...         "type": "org",
    ...         "resource_id": "MI6",
    ...         "role": "target"
    ...     }
    ... ],
    ... "preferred_language": "en"
    ... }
    THEN HTTP status code is 201
    AND result matches
    ... {
    ... "type": "contract",
    ... "contract_type": "SBCC_account",
    ... "start_date": "2013-03-13",
    ... "contract_parties": [
    ...     {
    ...         "type": "person",
    ...         "resource_id": "123",
    ...         "role": "user",
    ...		"username": "mrbond",
    ...		"user_role": "secret_agent"
    ...     },
    ...     {
    ...         "type": "org",
    ...         "resource_id": "MI6",
    ...         "role": "target"
    ...     }
    ... ],
    ... "preferred_language": "en"
    ... }
    AND result has key "id" containing a string, saved as $ID5
    AND HTTP Location header is API_URL/contracts/$ID5
    AND result has key "revision" containing a string, saved as $REV6

Check that the record is there.

    WHEN client GETs /contracts/$ID5
    THEN HTTP status code is 200
    AND result matches
    ... {
    ... "type": "contract",
    ... "contract_type": "SBCC_account",
    ... "start_date": "2013-03-13",
    ... "contract_parties": [
    ...     {
    ...         "type": "person",
    ...         "resource_id": "123",
    ...         "role": "user",
    ...		"username": "mrbond",
    ...		"user_role": "secret_agent"
    ...     },
    ...     {
    ...         "type": "org",
    ...         "resource_id": "MI6",
    ...         "role": "target"
    ...     }
    ... ],
    ... "preferred_language": "en"
    ... }
    AND result has key "id" containing a string, saved as $ID6
    AND values "$ID5" and "$ID6" are identical
    AND result has key "revision" containing a string, saved as $REV7
    AND values "$REV6" and "$REV7" are identical

Create a new service application contract.

    WHEN client POSTs /contracts with
    ... {
    ... "contract_type": "service_application",
    ... "date_created": "2015-11-30",
    ... "contract_parties": [
    ...     {
    ...         "type": "person",
    ...         "resource_id": "123",
    ...         "role": "applicant"
    ...     },
    ...     {
    ...         "type": "org",
    ...         "resource_id": "536457",
    ...         "role": "applicant"
    ...     }
    ... ],
    ... "contract_state_history": [
    ...     {
    ...         "state": "incomplete",
    ...         "modified_by": "123",
    ...         "modification_timestamp": "2015-11-30T14:30:45+0200"
    ...     }
    ... ],
    ... "signers": [
    ...     {
    ...         "signer": "1234",
    ...         "signing_request_timestamp": "2015-11-30T14:30:45+0200",
    ...         "signing_request_message": "Please, sign this."
    ...     }
    ... ]
    ... }
    THEN HTTP status code is 201
    AND result matches
    ... {
    ... "contract_type": "service_application",
    ... "date_created": "2015-11-30",
    ... "contract_parties": [
    ...     {
    ...         "type": "person",
    ...         "resource_id": "123",
    ...         "role": "applicant"
    ...     },
    ...     {
    ...         "type": "org",
    ...         "resource_id": "536457",
    ...         "role": "applicant"
    ...     }
    ... ],
    ... "contract_state_history": [
    ...     {
    ...         "state": "incomplete",
    ...         "modified_by": "123",
    ...         "modification_timestamp": "2015-11-30T14:30:45+0200"
    ...     }
    ... ],
    ... "signers": [
    ...     {
    ...         "signer": "1234",
    ...         "signing_request_timestamp": "2015-11-30T14:30:45+0200",
    ...         "signing_request_message": "Please, sign this."
    ...     }
    ... ]
    ... }
    AND result has key "id" containing a string, saved as $ID7
    AND HTTP Location header is API_URL/contracts/$ID7
    AND result has key "revision" containing a string, saved as $REV8

Check that the record is there.

    WHEN client GETs /contracts/$ID7
    THEN HTTP status code is 200
    AND result matches
    ... {
    ... "contract_type": "service_application",
    ... "date_created": "2015-11-30",
    ... "contract_parties": [
    ...     {
    ...         "type": "person",
    ...         "resource_id": "123",
    ...         "role": "applicant"
    ...     },
    ...     {
    ...         "type": "org",
    ...         "resource_id": "536457",
    ...         "role": "applicant"
    ...     }
    ... ],
    ... "contract_state_history": [
    ...     {
    ...         "state": "incomplete",
    ...         "modified_by": "123",
    ...         "modification_timestamp": "2015-11-30T14:30:45+0200"
    ...     }
    ... ],
    ... "signers": [
    ...     {
    ...         "signer": "1234",
    ...         "signing_request_timestamp": "2015-11-30T14:30:45+0200",
    ...         "signing_request_message": "Please, sign this."
    ...     }
    ... ]
    ... }
    AND result has key "id" containing a string, saved as $ID8
    AND values "$ID7" and "$ID8" are identical
    AND result has key "revision" containing a string, saved as $REV9
    AND values "$REV8" and "$REV9" are identical

Create a new ID06 contract.

    WHEN client POSTs /contracts with
    ... {
    ... "contract_type": "ID06_cards",
    ... "start_date": "2016-01-01",
    ... "end_date": "2038-01-19",
    ... "contract_parties": [
    ...     {
    ...         "type": "org",
    ...         "resource_id": "123",
    ...         "role": "issuer"
    ...     },
    ...     {
    ...         "type": "org",
    ...         "resource_id": "536457",
    ...         "role": "supplier"
    ...     },
    ...     {
    ...         "type": "person",
    ...         "resource_id": "543534",
    ...         "role": "issuer_contact"
    ...     }
    ... ],
    ... "id06_issuer_requires_bankid": false,
    ... "id06_contact_name": "Mikael Blomkvist",
    ... "id06_contact_email": "mikael.blomkvist@millennium.se"
    ... }
    THEN HTTP status code is 201
    AND result matches
    ... {
    ... "contract_type": "ID06_cards",
    ... "start_date": "2016-01-01",
    ... "end_date": "2038-01-19",
    ... "contract_parties": [
    ...     {
    ...         "type": "org",
    ...         "resource_id": "123",
    ...         "role": "issuer"
    ...     },
    ...     {
    ...         "type": "org",
    ...         "resource_id": "536457",
    ...         "role": "supplier"
    ...     },
    ...     {
    ...         "type": "person",
    ...         "resource_id": "543534",
    ...         "role": "issuer_contact"
    ...     }
    ... ],
    ... "id06_issuer_requires_bankid": false,
    ... "id06_contact_name": "Mikael Blomkvist",
    ... "id06_contact_email": "mikael.blomkvist@millennium.se"
    ... }
    AND result has key "id" containing a string, saved as $ID9
    AND HTTP Location header is API_URL/contracts/$ID9
    AND result has key "revision" containing a string, saved as $REV10

Check that the record is there.

    WHEN client GETs /contracts/$ID9
    THEN HTTP status code is 200
    AND result matches
    ... {
    ... "contract_type": "ID06_cards",
    ... "start_date": "2016-01-01",
    ... "end_date": "2038-01-19",
    ... "contract_parties": [
    ...     {
    ...         "type": "org",
    ...         "resource_id": "123",
    ...         "role": "issuer"
    ...     },
    ...     {
    ...         "type": "org",
    ...         "resource_id": "536457",
    ...         "role": "supplier"
    ...     },
    ...     {
    ...         "type": "person",
    ...         "resource_id": "543534",
    ...         "role": "issuer_contact"
    ...     }
    ... ],
    ... "id06_issuer_requires_bankid": false,
    ... "id06_contact_name": "Mikael Blomkvist",
    ... "id06_contact_email": "mikael.blomkvist@millennium.se"
    ... }
    AND result has key "id" containing a string, saved as $ID10
    AND values "$ID9" and "$ID10" are identical
    AND result has key "revision" containing a string, saved as $REV11
    AND values "$REV10" and "$REV11" are identical

Attempt to send invalid data.

    WHEN client POSTs /contracts with {"nonexistent_field": "data"}
    THEN HTTP status code is 400
