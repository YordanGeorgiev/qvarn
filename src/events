#!/usr/bin/env python2
#
# src/events.py - implement the /events resource
#
# Copyright 2015 Suomen Tilaajavastuu Oy
# All rights reserved.


import unifiedapi


event_prototype = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'event_type': u'',
    u'generated_timestamp': u'',
    u'person': u'',
    u'org': u'',
    u'project': u'',
    u'card': u'',
    u'card_event_type': u'',
}


event_sync_prototype = {
    u'sync_id': u'',
    u'sync_revision': u'',
}


listener_prototype = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'notify_of_new': False,
    u'listen_on': [u'']
}


notification_prototype = {
    u'type': u'',
    u'id': u'',
    u'listener_id': u'',
    u'revision': u'',
    u'resource_id': u'',
    u'resource_revision': u'',
    u'resource_change': u'',
    u'last_modified': 0
}


class CreateEventsTables_v1(unifiedapi.StoragePreparationStep):

    def run(self, db):
        db.create_table(
            u'event',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode),
            (u'event_type', unicode),
            (u'generated_timestamp', unicode),
            (u'person', unicode),
            (u'org', unicode),
            (u'project', unicode),
            (u'card', unicode),
            (u'card_event_type', unicode))

        db.create_table(
            u'event_sync',
            (u'id', unicode),
            (u'sync_id', unicode),
            (u'sync_revision', unicode))

        db.create_table(
            u'listener',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode),
            (u'notify_of_new', bool))

        db.create_table(
            u'listener_listen_on',
            (u'id', unicode),
            (u'list_pos', int),
            (u'listen_on', unicode))

        db.create_table(
            u'notification',
            (u'type', unicode),
            (u'id', unicode),
            (u'listener_id', unicode),
            (u'revision', unicode),
            (u'resource_id', unicode),
            (u'resource_revision', unicode),
            (u'resource_change', unicode),
            (u'last_modified', int))


class TypelessEvent(unifiedapi.ValidationError):

    msg = u'Event {id} does not have a type'


class TimelessEvent(unifiedapi.ValidationError):

    msg = u'Event {id} does not have a timestamp'


def validate_event(obj):
    if not obj[u'event_type']:
        raise TypelessEvent(id=obj.get(u'id', u'(no id provided)'))
    if not obj[u'generated_timestamp']:
        raise TimelessEvent(id=obj.get(u'id', u'(no id provided)'))


if __name__ == '__main__':
    app = unifiedapi.BackendApplication()

    prep = unifiedapi.StoragePreparer()
    prep.add_step(u'create-events-tables-v1', CreateEventsTables_v1())
    app.set_storage_preparer(prep)

    resource = unifiedapi.ListResource()
    resource.set_path(u'/events')
    resource.set_item_type(u'event')
    resource.set_item_prototype(event_prototype)
    resource.set_item_validator(validate_event)
    resource.set_subitem_prototype(u'sync', event_sync_prototype)
    resource.set_listener_prototype(listener_prototype)
    resource.set_notification_prototype(notification_prototype)
    app.add_resource(resource)

    app.run()
