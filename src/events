#!/usr/bin/env python2
#
# src/events.py - implement the /events resource
#
# Copyright 2015, 2016 Suomen Tilaajavastuu Oy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import qvarn


resource_type = u'event'


event_prototype_v0 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
}


event_prototype_current = event_prototype_v1 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'event_type': u'',
    u'generated_timestamp': u'',
    u'person': u'',
    u'org': u'',
    u'project': u'',
    u'card': u'',
    u'card_event_type': u'',
}


event_sync_prototype = {
    u'sync_sources': [
        {
            u'sync_source': u'',
            u'sync_id': u'',
        },
    ],
    u'sync_revision': u'',
}


class TypelessEvent(qvarn.ValidationError):

    msg = u'Event {id} does not have a type'


class TimelessEvent(qvarn.ValidationError):

    msg = u'Event {id} does not have a timestamp'


def validate_event(obj):
    if not obj[u'event_type']:
        raise TypelessEvent(id=obj.get(u'id', u'(no id provided)'))
    if not obj[u'generated_timestamp']:
        raise TimelessEvent(id=obj.get(u'id', u'(no id provided)'))


resource_type_spec = {
    u'path': u'/events',
    u'type': u'event',
    u'versions': [
        {
            u'version': u'v0',
            u'prototype': event_prototype_v0,
        },
        {
            u'version': u'v1',
            u'prototype': event_prototype_v1,
            u'subpaths': {
                u'sync': {
                    u'prototype': event_sync_prototype,
                },
            },
            u'validator': validate_event,
        },
    ],
}


application = qvarn.create_resource_server(resource_type_spec)
