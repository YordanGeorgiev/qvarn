#!/usr/bin/env python2
#
# src/events.py - implement the /events resource
#
# Copyright 2015 Suomen Tilaajavastuu Oy
# All rights reserved.


import unifiedapi


resource_type = u'event'


event_prototype_v0 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
}


event_prototype_current = event_prototype_v1 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'event_type': u'',
    u'generated_timestamp': u'',
    u'person': u'',
    u'org': u'',
    u'project': u'',
    u'card': u'',
    u'card_event_type': u'',
}


event_sync_prototype = {
    u'sync_sources': [
        {
            u'sync_source': u'',
            u'sync_id': u'',
        },
    ],
    u'sync_revision': u'',
}


class TypelessEvent(unifiedapi.ValidationError):

    msg = u'Event {id} does not have a type'


class TimelessEvent(unifiedapi.ValidationError):

    msg = u'Event {id} does not have a timestamp'


def validate_event(obj):
    if not obj[u'event_type']:
        raise TypelessEvent(id=obj.get(u'id', u'(no id provided)'))
    if not obj[u'generated_timestamp']:
        raise TimelessEvent(id=obj.get(u'id', u'(no id provided)'))


def setup():
    vs = unifiedapi.VersionedStorage()
    vs.set_resource_type(resource_type)

    vs.start_version(u'v0', None)
    vs.add_prototype(event_prototype_v0)

    vs.start_version(u'v1', None)
    vs.add_prototype(event_prototype_v1)
    vs.add_prototype(event_sync_prototype, subpath=u'sync')
    vs.add_prototype(unifiedapi.listener_prototype, auxtable=u'listener')
    vs.add_prototype(
        unifiedapi.notification_prototype, auxtable=u'notification')

    app = unifiedapi.BackendApplication()
    app.set_versioned_storage(vs)

    listener_resource = unifiedapi.ListenerResource()
    listener_resource.set_top_resource_path(resource_type, u'/events')
    app.add_resource(listener_resource)

    resource = unifiedapi.ListResource()
    resource.set_path(u'/events')
    resource.set_item_type(resource_type)
    resource.set_item_prototype(event_prototype_current)
    resource.set_item_validator(validate_event)
    resource.set_subitem_prototype(u'sync', event_sync_prototype)
    resource.set_listener(listener_resource)
    app.add_resource(resource)

    return app.prepare_for_uwsgi()


application = setup()
