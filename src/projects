#!/usr/bin/env python2
#
# src/projects - implement the /projects resource
#
# Copyright 2015 Suomen Tilaajavastuu Oy
# All rights reserved.


import unifiedapi


project_prototype = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'names': [u''],
    u'project_responsible_org': u'',
    u'project_responsible_person': u'',
    u'project_ids': [
        {
            u'project_id_type': u'',
            u'project_id': u'',
        },
    ],
}


project_sync_prototype = {
    u'sync_id': u'',
    u'sync_revision': u'',
}


listener_prototype = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'notify_of_new': False,
    u'listen_on': [u'']
}


notification_prototype = {
    u'type': u'',
    u'id': u'',
    u'listener_id': u'',
    u'revision': u'',
    u'resource_id': u'',
    u'resource_revision': u'',
    u'resource_change': u'',
    u'last_modified': 0
}


class CreateProjectsTables_v1(unifiedapi.StoragePreparationStep):

    def run(self, db):
        db.create_table(
            u'project',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode),
            (u'project_responsible_org', unicode),
            (u'project_responsible_person', unicode))

        db.create_table(
            u'project_names',
            (u'id', unicode),
            (u'list_pos', int),
            (u'names', unicode))

        db.create_table(
            u'project_project_ids',
            (u'id', int),
            (u'list_pos', int),
            (u'project_id_type', unicode),
            (u'project_id', unicode))

        db.create_table(
            u'project_sync',
            (u'id', unicode),
            (u'sync_id', unicode),
            (u'sync_revision', unicode))

        db.create_table(
            u'listener',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode),
            (u'notify_of_new', bool))

        db.create_table(
            u'listener_listen_on',
            (u'id', unicode),
            (u'list_pos', int),
            (u'listen_on', unicode))

        db.create_table(
            u'notification',
            (u'type', unicode),
            (u'id', unicode),
            (u'listener_id', unicode),
            (u'revision', unicode),
            (u'resource_id', unicode),
            (u'resource_revision', unicode),
            (u'resource_change', unicode),
            (u'last_modified', int))


def validate_project(obj):
    pass


if __name__ == '__main__':
    app = unifiedapi.BackendApplication()

    prep = unifiedapi.StoragePreparer()
    prep.add_step(u'create_projects_tables_v1', CreateProjectsTables_v1())
    app.set_storage_preparer(prep)

    resource = unifiedapi.ListResource()
    resource.set_path(u'/projects')
    resource.set_item_type(u'project')
    resource.set_item_prototype(project_prototype)
    resource.set_item_validator(validate_project)
    resource.set_subitem_prototype(u'sync', project_sync_prototype)
    resource.set_listener_prototype(listener_prototype)
    resource.set_notification_prototype(notification_prototype)
    app.set_resource(resource)

    app.run()
