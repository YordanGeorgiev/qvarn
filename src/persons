#!/usr/bin/env python2
#
# src/persons - implement the /persons resource
#
# Copyright 2015 Suomen Tilaajavastuu Oy
# All rights reserved.


import qvarn


resource_type = u'person'


person_prototype_v0 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
}


person_prototype_current = person_prototype_v1 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'names': [
        {
            u'full_name': u'',
            u'sort_key': u'',
            u'titles': [u''],
            u'given_names': [u''],
            u'surnames': [u''],
        },
    ],
}


person_photo_prototype = {
    u'body': buffer(''),
    u'content_type': u'',
}


person_private_prototype = {
    u'date_of_birth': u'',
    u'gov_ids': [
        {
            u'country': u'',
            u'id_type': u'',
            u'gov_id': u'',
        },
    ],
    u'contacts': [
        {
            u'contact_type': u'',
            u'contact_source': u'',
            u'contact_timestamp': u'',
            u'phone_number': u'',
            u'email_address': u'',
            u'full_address': u'',
            u'country': u'',
            u'address_lines': [u''],
            u'post_code': u'',
            u'post_area': u'',
            u'verification_code': u'',
            u'verification_code_expiration_date': u'',
            u'email_verification_timestamp': u'',
        },
    ],
    u'nationalities': [u''],
    u'residences': [
        {
            u'country': u'',
            u'location': u'',
        },
    ],
}


person_private_prototype_current = person_private_prototype_v2 = {
    u'date_of_birth': u'',
    u'gov_ids': [
        {
            u'country': u'',
            u'id_type': u'',
            u'gov_id': u'',
        },
    ],
    u'contacts': [
        {
            u'contact_type': u'',
            u'contact_roles': [u''],
            u'contact_source': u'',
            u'contact_timestamp': u'',
            u'phone_number': u'',
            u'email_address': u'',
            u'full_address': u'',
            u'country': u'',
            u'address_lines': [u''],
            u'post_code': u'',
            u'post_area': u'',
            u'verification_code': u'',
            u'verification_code_expiration_date': u'',
            u'email_verification_timestamp': u'',
        },
    ],
    u'nationalities': [u''],
    u'residences': [
        {
            u'country': u'',
            u'location': u'',
        },
    ],
}


person_sync_prototype = {
    u'sync_sources': [
        {
            u'sync_source': u'',
            u'sync_id': u'',
        },
    ],
    u'sync_revision': u'',
}


class NamelessPerson(qvarn.ValidationError):

    msg = u'Person {id} does not have any names'


class PersonWithoutFullName(qvarn.ValidationError):

    msg = u'Person {id} does not have a full name'


def validate_person(obj):
    if not obj[u'names']:
        raise NamelessPerson(id=obj.get(u'id', u'(no id provided)'))
    for name_dict in obj[u'names']:
        if not name_dict[u'full_name']:
            raise PersonWithoutFullName(id=obj.get(u'id', u'(no id provided)'))


def setup():
    vs = qvarn.VersionedStorage()
    vs.set_resource_type(resource_type)

    vs.start_version(u'v0', None)
    vs.add_prototype(person_prototype_v0)

    vs.start_version(u'v1', None)
    vs.add_prototype(person_prototype_v1)
    vs.add_prototype(person_photo_prototype, subpath=u'photo')
    vs.add_prototype(person_private_prototype, subpath=u'private')
    vs.add_prototype(person_sync_prototype, subpath=u'sync')
    vs.add_prototype(qvarn.listener_prototype, auxtable=u'listener')
    vs.add_prototype(
        qvarn.notification_prototype, auxtable=u'notification')

    vs.start_version(u'v2', None)
    vs.add_prototype(person_prototype_v1)
    vs.add_prototype(person_photo_prototype, subpath=u'photo')
    vs.add_prototype(person_private_prototype_v2, subpath=u'private')
    vs.add_prototype(person_sync_prototype, subpath=u'sync')
    vs.add_prototype(qvarn.listener_prototype, auxtable=u'listener')
    vs.add_prototype(qvarn.notification_prototype, auxtable=u'notification')

    app = qvarn.BackendApplication()
    app.set_versioned_storage(vs)

    listener_resource = qvarn.ListenerResource()
    listener_resource.set_top_resource_path(resource_type, u'/persons')
    app.add_resource(listener_resource)

    resource = qvarn.ListResource()
    resource.set_path(u'/persons')
    resource.set_item_type(resource_type)
    resource.set_item_prototype(person_prototype_current)
    resource.set_item_validator(validate_person)
    resource.set_subitem_prototype(
        u'private', person_private_prototype_current)
    resource.set_subitem_prototype(u'sync', person_sync_prototype)
    resource.set_listener(listener_resource)
    app.add_resource(resource)

    file_resource = qvarn.FileResource()
    file_resource.set_item_prototype(person_prototype_current)
    file_resource.set_top_resource_path(u'/persons')
    file_resource.set_item_type(resource_type)
    file_resource.set_file_resource_name(u'photo')
    file_resource.set_listener(listener_resource)
    app.add_resource(file_resource)

    return app.prepare_for_uwsgi()


application = setup()
