#!/usr/bin/env python2
#
# src/persons - implement the /persons resource
#
# Copyright 2015 Suomen Tilaajavastuu Oy
# All rights reserved.


import unifiedapi


person_prototype = {
    u'type': u'',
    u'id': u'',
    u'names': [
        {
            u'full-name': u'',
            u'sort-key': u'',
            u'given-names': [u''],
            u'surnames': [u''],
        },
    ],
    u'gov-ids': [
        {
            u'country': u'',
            u'id-type': u'',
            u'gov-id': u'',
        },
    ],
    u'contacts': [
        {
            u'contact-type': u'',
            u'contact-source': u'',
            u'contact-timestamp': u'',
            u'phone-number': u'',
            u'full-address': u'',
            u'country': u'',
            u'address-lines': [u''],
            u'post-code': u'',
            u'post-area': u'',
        },
    ],
    u'nationalities': [u''],
    u'residences': [u''],
}


class CreatePersonsTables_v1(unifiedapi.StoragePreparationStep):

    def run(self, db):
        db.create_table(
            u'person',
            (u'type', unicode),
            (u'id', unicode))

        db.create_table(
            u'person_names',
            (u'id', unicode),
            (u'list_pos', int),
            (u'full-name', unicode),
            (u'sort-key', unicode))

        db.create_table(
            u'person_names_given-names',
            (u'id', int),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'value', unicode))

        db.create_table(
            u'person_names_surnames',
            (u'id', int),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'value', unicode))

        db.create_table(
            u'person_gov-ids',
            (u'id', unicode),
            (u'list_pos', int),
            (u'country', unicode),
            (u'id-type', unicode),
            (u'gov-id', unicode))

        db.create_table(
            u'person_contacts',
            (u'id', unicode),
            (u'list_pos', int),
            (u'contact-type', unicode),
            (u'contact-source', unicode),
            (u'contact-timestamp', unicode),
            (u'phone-number', unicode),
            (u'full-address', unicode),
            (u'country', unicode),
            (u'post-code', unicode),
            (u'post-area', unicode))

        db.create_table(
            u'person_contacts_address_lines',
            (u'id', int),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'value', unicode))

        db.create_table(
            u'person_nationalities',
            (u'id', unicode),
            (u'list_pos', int),
            (u'value', unicode))

        db.create_table(
            u'person_residences',
            (u'id', unicode),
            (u'list_pos', int),
            (u'value', unicode))


class NamelessPerson(unifiedapi.ValidationError):

    msg = u'Person {id} does not have any names'


class PersonWithoutFullName(unifiedapi.ValidationError):

    msg = u'Person {id} does not have a full name'


def validate_person(obj):
    if not obj[u'names']:
        raise NamelessPerson(id=obj.get(u'id', u'(no id provided)'))
    for name_dict in obj[u'names']:
        if not name_dict[u'full-name']:
            raise PersonWithoutFullName(id=obj.get(u'id', u'(no id provided)'))


if __name__ == '__main__':
    prep = unifiedapi.StoragePreparer()
    prep.add_step(u'create-persons-tables-v1', CreatePersonsTables_v1())

    resource = unifiedapi.ListResource()
    resource.set_path(u'/persons')
    resource.set_item_type(u'person')
    resource.set_item_prototype(person_prototype)
    resource.set_item_validator(validate_person)
    resource.set_storage_preparer(prep)

    app = unifiedapi.BackendApplication()
    app.set_resource(resource)
    app.run()
