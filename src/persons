#!/usr/bin/env python2
#
# src/persons - implement the /persons resource
#
# Copyright 2015 Suomen Tilaajavastuu Oy
# All rights reserved.


import unifiedapi


person_prototype = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'names': [
        {
            u'full_name': u'',
            u'sort_key': u'',
            u'titles': [u''],
            u'given_names': [u''],
            u'surnames': [u''],
        },
    ],
}


person_private_prototype = {
    u'date_of_birth': u'',
    u'gov_ids': [
        {
            u'country': u'',
            u'id_type': u'',
            u'gov_id': u'',
        },
    ],
    u'contacts': [
        {
            u'contact_type': u'',
            u'contact_source': u'',
            u'contact_timestamp': u'',
            u'phone_number': u'',
            u'email_address': u'',
            u'full_address': u'',
            u'country': u'',
            u'address_lines': [u''],
            u'post_code': u'',
            u'post_area': u'',
        },
    ],
    u'nationalities': [u''],
    u'residences': [
        {
            u'country': u'',
            u'location': u'',
        },
    ],
}


person_sync_prototype = {
    u'sync_id': u'',
    u'sync_revision': u'',
}


class CreatePersonsTables_v1(unifiedapi.StoragePreparationStep):

    def run(self, db):
        db.create_table(
            u'person',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode))

        db.create_table(
            u'person_names',
            (u'id', unicode),
            (u'list_pos', int),
            (u'full_name', unicode),
            (u'sort_key', unicode))

        db.create_table(
            u'person_names_given_names',
            (u'id', unicode),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'given_names', unicode))

        db.create_table(
            u'person_names_surnames',
            (u'id', unicode),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'surnames', unicode))

        db.create_table(
            u'person_private',
            (u'id', unicode),
            (u'date_of_birth', unicode))

        db.create_table(
            u'person_private_gov_ids',
            (u'id', unicode),
            (u'list_pos', int),
            (u'country', unicode),
            (u'id_type', unicode),
            (u'gov_id', unicode))

        db.create_table(
            u'person_private_contacts',
            (u'id', unicode),
            (u'list_pos', int),
            (u'contact_type', unicode),
            (u'contact_source', unicode),
            (u'contact_timestamp', unicode),
            (u'phone_number', unicode),
            (u'email_address', unicode),
            (u'full_address', unicode),
            (u'country', unicode),
            (u'post_code', unicode),
            (u'post_area', unicode))

        db.create_table(
            u'person_private_contacts_address_lines',
            (u'id', unicode),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'address_lines', unicode))

        db.create_table(
            u'person_private_nationalities',
            (u'id', unicode),
            (u'list_pos', int),
            (u'nationalities', unicode))

        db.create_table(
            u'person_private_residences',
            (u'id', unicode),
            (u'list_pos', int),
            (u'country', unicode),
            (u'location', unicode))

        db.create_table(
            u'person_sync',
            (u'id', unicode),
            (u'sync_id', unicode),
            (u'sync_revision', unicode))

        db.create_table(
            u'listener',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode),
            (u'notify_of_new', bool))

        db.create_table(
            u'listener_listen_on',
            (u'id', unicode),
            (u'list_pos', int),
            (u'listen_on', unicode))

        db.create_table(
            u'notification',
            (u'type', unicode),
            (u'id', unicode),
            (u'listener_id', unicode),
            (u'revision', unicode),
            (u'resource_id', unicode),
            (u'resource_revision', unicode),
            (u'resource_change', unicode),
            (u'last_modified', int))

        db.create_table(
            u'person_photo',
            (u'id', unicode),
            (u'body', buffer),
            (u'content_type', unicode))


class NamelessPerson(unifiedapi.ValidationError):

    msg = u'Person {id} does not have any names'


class PersonWithoutFullName(unifiedapi.ValidationError):

    msg = u'Person {id} does not have a full name'


def validate_person(obj):
    if not obj[u'names']:
        raise NamelessPerson(id=obj.get(u'id', u'(no id provided)'))
    for name_dict in obj[u'names']:
        if not name_dict[u'full_name']:
            raise PersonWithoutFullName(id=obj.get(u'id', u'(no id provided)'))


if __name__ == '__main__':
    app = unifiedapi.BackendApplication()

    prep = unifiedapi.StoragePreparer()
    prep.add_step(u'create_persons_tables_v1', CreatePersonsTables_v1())
    app.set_storage_preparer(prep)

    listener_resource = unifiedapi.ListenerResource()
    listener_resource.set_top_resource_path(u'/persons')
    app.add_resource(listener_resource)

    resource = unifiedapi.ListResource()
    resource.set_path(u'/persons')
    resource.set_item_type(u'person')
    resource.set_item_prototype(person_prototype)
    resource.set_item_validator(validate_person)
    resource.set_subitem_prototype(u'private', person_private_prototype)
    resource.set_subitem_prototype(u'sync', person_sync_prototype)
    resource.set_listener(listener_resource)
    app.add_resource(resource)

    file_resource = unifiedapi.FileResource()
    file_resource.set_item_prototype(person_prototype)
    file_resource.set_top_resource_path(u'/persons')
    file_resource.set_item_type(u'person')
    file_resource.set_file_resource_name(u'photo')
    file_resource.set_listener(listener_resource)
    app.add_resource(file_resource)

    app.run()
