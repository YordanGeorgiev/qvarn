#!/usr/bin/env python2
#
# src/competences - implement the /competences resource
#
# Copyright 2015 Suomen Tilaajavastuu Oy
# All rights reserved.


import qvarn


resource_type = u'competence'


competence_prototype_v0 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
}


competence_prototype_v1 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'employee_person_id': u'',
    u'employer_org_id': u'',
    u'valid_from_date': u'',
    u'valid_until_date': u'',
    u'competence_type_id': u'',
    u'competence_card_id': u'',
    u'competence_card_holder_names': [
        {
            u'full_name': u'',
            u'sort_key': u'',
            u'given_names': [u''],
            u'surnames': [u''],
        },
    ],
}


competence_prototype_current = competence_prototype_v2 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'employee_person_id': u'',
    u'employer_org_id': u'',
    u'valid_from_date': u'',
    u'valid_until_date': u'',
    u'competence_type_id': u'',
    u'granted_by_org_id': u'',
    u'competence_registry_id': u'',
    u'competence_card_id': u'',
    u'competence_card_holder_names': [
        {
            u'full_name': u'',
            u'sort_key': u'',
            u'given_names': [u''],
            u'surnames': [u''],
        },
    ],
    u'competence_trainer': u'',
    u'validation_status': u'',
}


competence_sync_prototype = {
    u'sync_id': u'',
    u'sync_revision': u'',
}


def validate_competence(obj):
    pass


def setup():
    vs = qvarn.VersionedStorage()
    vs.set_resource_type(resource_type)

    vs.start_version(u'v0', None)
    vs.add_prototype(competence_prototype_v0)

    vs.start_version(u'v1', None)
    vs.add_prototype(competence_prototype_v1)
    vs.add_prototype(competence_sync_prototype, subpath=u'sync')
    vs.add_prototype(qvarn.listener_prototype, auxtable=u'listener')
    vs.add_prototype(
        qvarn.notification_prototype, auxtable=u'notification')

    vs.start_version(u'v2', None)
    vs.add_prototype(competence_prototype_v2)
    vs.add_prototype(competence_sync_prototype, subpath=u'sync')
    vs.add_prototype(qvarn.listener_prototype, auxtable=u'listener')
    vs.add_prototype(
        qvarn.notification_prototype, auxtable=u'notification')

    app = qvarn.BackendApplication()
    app.set_versioned_storage(vs)

    listener_resource = qvarn.ListenerResource()
    listener_resource.set_top_resource_path(resource_type, u'/competences')
    app.add_resource(listener_resource)

    resource = qvarn.ListResource()
    resource.set_path(u'/competences')
    resource.set_item_type(resource_type)
    resource.set_item_prototype(competence_prototype_current)
    resource.set_item_validator(validate_competence)
    resource.set_subitem_prototype(u'sync', competence_sync_prototype)
    resource.set_listener(listener_resource)
    app.add_resource(resource)

    return app.prepare_for_uwsgi()


application = setup()
