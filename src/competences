#!/usr/bin/env python2
#
# src/competences - implement the /competences resource
#
# Copyright 2015 Suomen Tilaajavastuu Oy
# All rights reserved.


import unifiedapi


competence_prototype = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'employee_person_id': u'',
    u'employer_org_id': u'',
    u'valid_from_date': u'',
    u'valid_until_date': u'',
    u'competence_type_id': u'',
    u'competence_card_id': u'',
    u'competence_card_holder_names': [
        {
            u'full_name': u'',
            u'sort_key': u'',
            u'given_names': [u''],
            u'surnames': [u''],
        },
    ],
}


competence_sync_prototype = {
    u'sync_id': u'',
    u'sync_revision': u'',
}


class CreateCompetencesTables_v1(unifiedapi.StoragePreparationStep):

    def run(self, db):
        db.create_table(
            u'competence',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode),
            (u'employee_person_id', unicode),
            (u'employer_org_id', unicode),
            (u'valid_from_date', unicode),
            (u'valid_until_date', unicode),
            (u'competence_type_id', unicode),
            (u'competence_card_id', unicode))

        db.create_table(
            u'competence_sync',
            (u'id', unicode),
            (u'sync_id', unicode),
            (u'sync_revision', unicode))

        db.create_table(
            u'competences__listener',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode),
            (u'notify_of_new', bool))

        db.create_table(
            u'competences__listener_listen_on',
            (u'id', unicode),
            (u'list_pos', int),
            (u'listen_on', unicode))

        db.create_table(
            u'competences__notification',
            (u'type', unicode),
            (u'id', unicode),
            (u'listener_id', unicode),
            (u'revision', unicode),
            (u'resource_id', unicode),
            (u'resource_revision', unicode),
            (u'resource_change', unicode),
            (u'last_modified', int))

        db.create_table(
            u'competence_competence_card_holder_names',
            (u'id', unicode),
            (u'list_pos', int),
            (u'full_name', unicode),
            (u'sort_key', unicode))

        db.create_table(
            u'competence_competence_card_holder_names_given_names',
            (u'id', unicode),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'given_names', unicode))

        db.create_table(
            u'competence_competence_card_holder_names_surnames',
            (u'id', unicode),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'surnames', unicode))


def validate_competence(obj):
    pass


if __name__ == '__main__':
    app = unifiedapi.BackendApplication()

    prep = unifiedapi.StoragePreparer(u'competence')
    prep.add_step(
        u'create_competences_tables_v1', CreateCompetencesTables_v1())
    app.set_storage_preparer(prep)

    listener_resource = unifiedapi.ListenerResource()
    listener_resource.set_top_resource_path(u'/competences')
    app.add_resource(listener_resource)

    resource = unifiedapi.ListResource()
    resource.set_path(u'/competences')
    resource.set_item_type(u'competence')
    resource.set_item_prototype(competence_prototype)
    resource.set_item_validator(validate_competence)
    resource.set_subitem_prototype(u'sync', competence_sync_prototype)
    resource.set_listener(listener_resource)
    app.add_resource(resource)

    app.run()
