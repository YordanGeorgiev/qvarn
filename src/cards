#!/usr/bin/env python2
#
# src/cards - implement the /cards resource
#
# Copyright 2015 Suomen Tilaajavastuu Oy
# All rights reserved.


import unifiedapi


card_prototype = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'card_type': u'',
    u'card_ids': [
        {
            u'card_id_type': u'',
            u'card_id': u'',
        },
    ],
    u'issued_date': u'',
    u'valid_until_date': u'',
    u'card_status_history': [
        {
            u'card_status': u'',
            u'modified_by': u'',
            u'modified_timestamp': u'',
            u'modification_reason': u'',
            u'modification_description': u'',
        },
    ],
    u'org': u'',
    u'person': u'',
}


card_sync_prototype = {
    u'sync_id': u'',
    u'sync_revision': u'',
}


listener_prototype = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'notify_of_new': False,
    u'listen_on': [u'']
}


notification_prototype = {
    u'type': u'',
    u'id': u'',
    u'listener_id': u'',
    u'revision': u'',
    u'resource_id': u'',
    u'resource_revision': u'',
    u'resource_change': u'',
    u'last_modified': 0
}


class CreateCardsTables_v1(unifiedapi.StoragePreparationStep):

    def run(self, db):
        db.create_table(
            u'card',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode),
            (u'card_type', unicode),
            (u'issued_date', unicode),
            (u'valid_until_date', unicode),
            (u'org', unicode),
            (u'person', unicode))

        db.create_table(
            u'card_card_ids',
            (u'id', unicode),
            (u'list_pos', int),
            (u'card_id_type', unicode),
            (u'card_id', unicode))

        db.create_table(
            u'card_card_status_history',
            (u'id', unicode),
            (u'list_pos', int),
            (u'card_status', unicode),
            (u'modified_by', unicode),
            (u'modified_timestamp', unicode),
            (u'modification_reason', unicode),
            (u'modification_description', unicode))

        db.create_table(
            u'card_sync',
            (u'id', unicode),
            (u'sync_id', unicode),
            (u'sync_revision', unicode))

        db.create_table(
            u'listener',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode),
            (u'notify_of_new', bool))

        db.create_table(
            u'listener_listen_on',
            (u'id', unicode),
            (u'list_pos', int),
            (u'listen_on', unicode))

        db.create_table(
            u'notification',
            (u'type', unicode),
            (u'id', unicode),
            (u'listener_id', unicode),
            (u'revision', unicode),
            (u'resource_id', unicode),
            (u'resource_revision', unicode),
            (u'resource_change', unicode),
            (u'last_modified', int))


class TypelessCard(unifiedapi.ValidationError):

    msg = u'Card {id} does not have a type'


def validate_card(obj):
    if not obj[u'card_type']:
        raise TypelessCard(id=obj.get(u'id', u'(no id provided)'))


if __name__ == '__main__':
    app = unifiedapi.BackendApplication()

    prep = unifiedapi.StoragePreparer()
    prep.add_step(u'create_cards_tables_v1', CreateCardsTables_v1())
    app.set_storage_preparer(prep)

    resource = unifiedapi.ListResource()
    resource.set_path(u'/cards')
    resource.set_item_type(u'card')
    resource.set_item_prototype(card_prototype)
    resource.set_item_validator(validate_card)
    resource.set_subitem_prototype(u'sync', card_sync_prototype)
    resource.set_listener_prototype(listener_prototype)
    resource.set_notification_prototype(notification_prototype)
    app.set_resource(resource)

    app.run()
