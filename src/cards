#!/usr/bin/env python2
#
# src/cards - implement the /cards resource
#
# Copyright 2015 Suomen Tilaajavastuu Oy
# All rights reserved.


import unifiedapi


card_prototype = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'card_type': u'',
    u'card_ids': [
        {
            u'card_id_type': u'',
            u'card_id': u'',
        },
    ],
    u'issued_date': u'',
    u'valid_from_date': u'',
    u'valid_until_date': u'',
    u'expiration_date': u'',
    u'card_status_history': [
        {
            u'card_status': u'',
            u'modified_by': u'',
            u'modified_timestamp': u'',
            u'modification_reason': u'',
            u'modification_description': u'',
        },
    ],
    u'org': u'',
    u'issuer_name': u'',
    u'issuer_gov_org_ids': [
        {
            u'country': u'',
            u'org_id_type': u'',
            u'gov_org_id': u'',
        },
    ],
    u'person': u'',
    u'holder_gov_ids': [
        {
            u'country': u'',
            u'id_type': u'',
            u'gov_id': u'',
        },
    ],
    u'holder_nationalities': [u''],
    u'holder_names': [
        {
            u'full_name': u'',
            u'sort_key': u'',
            u'titles': [u''],
            u'given_names': [u''],
            u'surnames': [u''],
        },
    ],
    u'id06_taxation_country': u'',
    u'id06_virtual_devices': [u''],
    u'id06_virtual_enabled': False,
    u'id06_virtual_bankid_required': False,
    u'id06_virtual_valid_from': u'',
    u'id06_virtual_valid_until': u'',
    u'id06_virtual_history': [
        {
            u'full_name': u'',
            u'date': u'',
            u'enabled': False,
        },
    ],
    u'id06_supplier_full_name': u'',
}


card_sync_prototype = {
    u'sync_sources': [
        {
            u'sync_source': u'',
            u'sync_id': u'',
        },
    ],
    u'sync_revision': u'',
}


class CreateCardsTables_v1(unifiedapi.StoragePreparationStep):

    def run(self, db):
        db.create_table(
            u'card',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode),
            (u'card_type', unicode),
            (u'issued_date', unicode),
            (u'valid_from_date', unicode),
            (u'valid_until_date', unicode),
            (u'expiration_date', unicode),
            (u'org', unicode),
            (u'person', unicode),
            (u'issuer_name', unicode),
            (u'id06_taxation_country', unicode),
            (u'id06_virtual_enabled', bool),
            (u'id06_virtual_bankid_required', bool),
            (u'id06_virtual_valid_from', unicode),
            (u'id06_virtual_valid_until', unicode),
            (u'id06_supplier_full_name', unicode),
        )

        db.create_table(
            u'card_card_ids',
            (u'id', unicode),
            (u'list_pos', int),
            (u'card_id_type', unicode),
            (u'card_id', unicode))

        db.create_table(
            u'card_card_status_history',
            (u'id', unicode),
            (u'list_pos', int),
            (u'card_status', unicode),
            (u'modified_by', unicode),
            (u'modified_timestamp', unicode),
            (u'modification_reason', unicode),
            (u'modification_description', unicode))

        db.create_table(
            u'card_sync',
            (u'id', unicode),
            (u'sync_revision', unicode))

        db.create_table(
            u'card_sync_sync_sources',
            (u'id', unicode),
            (u'list_pos', int),
            (u'sync_source', unicode),
            (u'sync_id', unicode))

        db.create_table(
            u'card_issuer_names',
            (u'id', unicode),
            (u'list_pos', int),
            (u'full_name', unicode),
            (u'sort_key', unicode))

        db.create_table(
            u'card_issuer_names_titles',
            (u'id', unicode),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'titles', unicode))

        db.create_table(
            u'card_issuer_names_given_names',
            (u'id', unicode),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'given_names', unicode))

        db.create_table(
            u'card_issuer_names_surnames',
            (u'id', unicode),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'surnames', unicode))

        db.create_table(
            u'card_issuer_gov_org_ids',
            (u'id', unicode),
            (u'list_pos', int),
            (u'country', unicode),
            (u'org_id_type', unicode),
            (u'gov_org_id', unicode))

        db.create_table(
            u'card_holder_gov_ids',
            (u'id', unicode),
            (u'list_pos', int),
            (u'country', unicode),
            (u'id_type', unicode),
            (u'gov_id', unicode))

        db.create_table(
            u'card_holder_nationalities',
            (u'id', unicode),
            (u'list_pos', int),
            (u'holder_nationalities', unicode))

        db.create_table(
            u'card_holder_names',
            (u'id', unicode),
            (u'list_pos', int),
            (u'full_name', unicode),
            (u'sort_key', unicode))

        db.create_table(
            u'card_holder_names_titles',
            (u'id', unicode),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'titles', unicode))

        db.create_table(
            u'card_holder_names_given_names',
            (u'id', unicode),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'given_names', unicode))

        db.create_table(
            u'card_holder_names_surnames',
            (u'id', unicode),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'surnames', unicode))

        db.create_table(
            u'card_id06_virtual_devices',
            (u'id', unicode),
            (u'list_pos', int),
            (u'id06_virtual_devices', unicode))

        db.create_table(
            u'card_id06_virtual_history',
            (u'id', unicode),
            (u'list_pos', int),
            (u'full_name', unicode),
            (u'date', unicode),
            (u'enabled', bool))

        db.create_table(
            u'listener',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode),
            (u'notify_of_new', bool))

        db.create_table(
            u'listener_listen_on',
            (u'id', unicode),
            (u'list_pos', int),
            (u'listen_on', unicode))

        db.create_table(
            u'notification',
            (u'type', unicode),
            (u'id', unicode),
            (u'listener_id', unicode),
            (u'revision', unicode),
            (u'resource_id', unicode),
            (u'resource_revision', unicode),
            (u'resource_change', unicode),
            (u'last_modified', int))

        db.create_table(
            u'card_holder_photo',
            (u'id', unicode),
            (u'body', buffer),
            (u'content_type', unicode))

        db.create_table(
            u'card_issuer_logo',
            (u'id', unicode),
            (u'body', buffer),
            (u'content_type', unicode))


class TypelessCard(unifiedapi.ValidationError):

    msg = u'Card {id} does not have a type'


def validate_card(obj):
    if not obj[u'card_type']:
        raise TypelessCard(id=obj.get(u'id', u'(no id provided)'))


if __name__ == '__main__':
    app = unifiedapi.BackendApplication()

    prep = unifiedapi.StoragePreparer()
    prep.add_step(u'create_cards_tables_v1', CreateCardsTables_v1())
    app.set_storage_preparer(prep)

    listener_resource = unifiedapi.ListenerResource()
    listener_resource.set_top_resource_path(u'/cards')
    app.add_resource(listener_resource)

    resource = unifiedapi.ListResource()
    resource.set_path(u'/cards')
    resource.set_item_type(u'card')
    resource.set_item_prototype(card_prototype)
    resource.set_item_validator(validate_card)
    resource.set_subitem_prototype(u'sync', card_sync_prototype)
    resource.set_listener(listener_resource)
    app.add_resource(resource)

    holder_photo_resource = unifiedapi.FileResource()
    holder_photo_resource.set_item_prototype(card_prototype)
    holder_photo_resource.set_top_resource_path(u'/cards')
    holder_photo_resource.set_item_type(u'card')
    holder_photo_resource.set_file_resource_name(u'holder_photo')
    holder_photo_resource.set_listener(listener_resource)
    app.add_resource(holder_photo_resource)

    issuer_logo_resource = unifiedapi.FileResource()
    issuer_logo_resource.set_item_prototype(card_prototype)
    issuer_logo_resource.set_top_resource_path(u'/cards')
    issuer_logo_resource.set_item_type(u'card')
    issuer_logo_resource.set_file_resource_name(u'issuer_logo')
    issuer_logo_resource.set_listener(listener_resource)
    app.add_resource(issuer_logo_resource)

    app.run()
