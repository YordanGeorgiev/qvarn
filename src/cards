#!/usr/bin/env python2
#
# src/cards - implement the /cards resource
#
# Copyright 2015 Suomen Tilaajavastuu Oy
# All rights reserved.


import qvarn


resource_type = u'card'

card_prototype_v0 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
}


card_prototype_current = card_prototype_v1 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'card_type': u'',
    u'card_ids': [
        {
            u'card_id_type': u'',
            u'card_id': u'',
        },
    ],
    u'issued_date': u'',
    u'created_date': u'',
    u'valid_from_date': u'',
    u'valid_until_date': u'',
    u'expiration_date': u'',
    u'card_status_history': [
        {
            u'card_status': u'',
            u'modified_by': u'',
            u'modified_timestamp': u'',
            u'modification_reason': u'',
            u'modification_description': u'',
        },
    ],
    u'current_status': u'',
    u'org': u'',
    u'issuer_name': u'',
    u'issuer_gov_org_ids': [
        {
            u'country': u'',
            u'org_id_type': u'',
            u'gov_org_id': u'',
        },
    ],
    u'person': u'',
    u'holder_gov_ids': [
        {
            u'country': u'',
            u'id_type': u'',
            u'gov_id': u'',
        },
    ],
    u'holder_nationalities': [u''],
    u'holder_names': [
        {
            u'full_name': u'',
            u'sort_key': u'',
            u'titles': [u''],
            u'given_names': [u''],
            u'surnames': [u''],
        },
    ],
    u'id06_taxation_country': u'',
    u'id06_virtual_devices': [u''],
    u'id06_virtual_enabled': False,
    u'id06_virtual_bankid_required': False,
    u'id06_virtual_valid_from': u'',
    u'id06_virtual_valid_until': u'',
    u'id06_virtual_history': [
        {
            u'full_name': u'',
            u'date': u'',
            u'enabled': False,
        },
    ],
    u'id06_supplier_full_name': u'',
}


card_holder_photo_prototype = {
    u'body': buffer(''),
    u'content_type': u'',
}


card_issuer_logo_prototype = {
    u'body': buffer(''),
    u'content_type': u'',
}


card_sync_prototype = {
    u'sync_sources': [
        {
            u'sync_source': u'',
            u'sync_id': u'',
        },
    ],
    u'sync_revision': u'',
}


class TypelessCard(qvarn.ValidationError):

    msg = u'Card {id} does not have a type'


def validate_card(obj):
    if not obj[u'card_type']:
        raise TypelessCard(id=obj.get(u'id', u'(no id provided)'))


def setup():
    vs = qvarn.VersionedStorage()
    vs.set_resource_type(resource_type)

    vs.start_version(u'v0', None)
    vs.add_prototype(card_prototype_v0)

    vs.start_version(u'v1', None)
    vs.add_prototype(card_prototype_v1)
    vs.add_prototype(card_holder_photo_prototype, subpath=u'holder_photo')
    vs.add_prototype(card_issuer_logo_prototype, subpath=u'issuer_logo')
    vs.add_prototype(card_sync_prototype, subpath=u'sync')
    vs.add_prototype(qvarn.listener_prototype, auxtable=u'listener')
    vs.add_prototype(
        qvarn.notification_prototype, auxtable=u'notification')

    app = qvarn.BackendApplication()
    app.set_versioned_storage(vs)

    listener_resource = qvarn.ListenerResource()
    listener_resource.set_top_resource_path(resource_type, u'/cards')
    app.add_resource(listener_resource)

    resource = qvarn.ListResource()
    resource.set_path(u'/cards')
    resource.set_item_type(resource_type)
    resource.set_item_prototype(card_prototype_current)
    resource.set_item_validator(validate_card)
    resource.set_subitem_prototype(u'sync', card_sync_prototype)
    resource.set_listener(listener_resource)
    app.add_resource(resource)

    holder_photo_resource = qvarn.FileResource()
    holder_photo_resource.set_item_prototype(card_prototype_current)
    holder_photo_resource.set_top_resource_path(u'/cards')
    holder_photo_resource.set_item_type(resource_type)
    holder_photo_resource.set_file_resource_name(u'holder_photo')
    holder_photo_resource.set_listener(listener_resource)
    app.add_resource(holder_photo_resource)

    issuer_logo_resource = qvarn.FileResource()
    issuer_logo_resource.set_item_prototype(card_prototype_current)
    issuer_logo_resource.set_top_resource_path(u'/cards')
    issuer_logo_resource.set_item_type(resource_type)
    issuer_logo_resource.set_file_resource_name(u'issuer_logo')
    issuer_logo_resource.set_listener(listener_resource)
    app.add_resource(issuer_logo_resource)

    return app.prepare_for_uwsgi()


application = setup()
