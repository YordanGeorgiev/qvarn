#!/usr/bin/env python2
#
# src/orgs.py - implement the /orgs resource
#
# Copyright 2015, 2016 Suomen Tilaajavastuu Oy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import qvarn


resource_type = u'org'


org_prototype_v0 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
}


org_prototype_v1 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'country': u'',
    u'names': [u''],
    u'gov_org_ids': [
        {
            u'country': u'',
            u'org_id_type': u'',
            u'gov_org_id': u'',
        },
    ],
    u'contacts': [
        {
            u'contact_type': u'',
            u'contact_source': u'',
            u'contact_timestamp': u'',
            u'phone_number': u'',
            u'email_address': u'',
            u'full_address': u'',
            u'country': u'',
            u'address_lines': [u''],
            u'post_code': u'',
            u'post_area': u'',
        },
    ],
    u'is_luotettava_kumppani_member': False,
}


org_prototype_v2 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'country': u'',
    u'names': [u''],
    u'gov_org_ids': [
        {
            u'country': u'',
            u'org_id_type': u'',
            u'gov_org_id': u'',
        },
    ],
    u'contacts': [
        {
            u'contact_type': u'',
            u'contact_roles': [u''],
            u'contact_source': u'',
            u'contact_timestamp': u'',
            u'phone_number': u'',
            u'email_address': u'',
            u'full_address': u'',
            u'country': u'',
            u'address_lines': [u''],
            u'post_code': u'',
            u'post_area': u'',
        },
    ],
    u'is_luotettava_kumppani_member': False,
}


org_prototype_v3 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'country': u'',
    u'names': [u''],
    u'gov_org_ids': [
        {
            u'country': u'',
            u'org_id_type': u'',
            u'gov_org_id': u'',
        },
    ],
    u'contacts': [
        {
            u'contact_type': u'',
            u'contact_roles': [u''],
            u'contact_source': u'',
            u'contact_timestamp': u'',
            u'phone_number': u'',
            u'email_address': u'',
            u'full_address': u'',
            u'country': u'',
            u'address_lines': [u''],
            u'post_code': u'',
            u'post_area': u'',
            u'einvoice_operator': u'',
            u'einvoice_address': u'',
        },
    ],
}


org_prototype_current = org_prototype_v4 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'country': u'',
    u'names': [u''],
    u'gov_org_ids': [
        {
            u'country': u'',
            u'org_id_type': u'',
            u'gov_org_id': u'',
        },
    ],
    u'contacts': [
        {
            u'contact_type': u'',
            u'contact_roles': [u''],
            u'contact_source': u'',
            u'contact_timestamp': u'',
            u'phone_number': u'',
            u'email_address': u'',
            u'full_address': u'',
            u'country': u'',
            u'address_lines': [u''],
            u'post_code': u'',
            u'post_area': u'',
            u'einvoice_operator': u'',
            u'einvoice_address': u'',
        },
    ],
    u'is_luotettava_kumppani_member': False,
}


org_sync_prototype = {
    u'sync_sources': [
        {
            u'sync_source': u'',
            u'sync_id': u'',
        },
    ],
    u'sync_revision': u'',
}


class NamelessOrg(qvarn.ValidationError):

    msg = u'Organisation {id} does not have any names'


class InvalidContactRole(qvarn.ValidationError):

    msg = u'Organisation {id} contact role is invalid'


def validate_org(obj):
    if not obj[u'names']:
        raise NamelessOrg(id=obj[u'id'])
    allowed_contact_roles = [
        u'billing'
    ]
    if u'contact_roles' in obj:
        for contact_role in obj[u'contact_roles']:
            if contact_role not in allowed_contact_roles:
                raise InvalidContactRole(id=obj[u'id'])


resource_type_spec = {
    u'path': u'/orgs',
    u'type': u'org',
    u'versions': [
        {
            u'version': u'v0',
            u'prototype': org_prototype_v0,
        },
        {
            u'version': u'v1',
            u'prototype': org_prototype_v1,
            u'subpaths': {
                u'sync': {
                    u'prototype': org_sync_prototype,
                },
            },
        },
        {
            u'version': u'v2',
            u'prototype': org_prototype_v2,
            u'subpaths': {
                u'sync': {
                    u'prototype': org_sync_prototype,
                },
            },
        },
        {
            u'version': u'v3',
            u'prototype': org_prototype_v3,
            u'subpaths': {
                u'sync': {
                    u'prototype': org_sync_prototype,
                },
            },
        },
        {
            u'version': u'v4',
            u'prototype': org_prototype_v4,
            u'subpaths': {
                u'sync': {
                    u'prototype': org_sync_prototype,
                },
            },
            u'validator': validate_org,
        },
    ],
}


application = qvarn.create_resource_server(resource_type_spec)
