#!/usr/bin/env python2
#
# src/competence_types - implement the /competence_types resource
#
# Copyright 2015, 2016 Suomen Tilaajavastuu Oy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import qvarn


resource_type = u'competence_type'


competence_type_prototype_v0 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
}


competence_type_prototype_current = competence_type_prototype_v1 = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'competence_type_id': u'',
    u'names': [
        {
            u'locale': u'',
            u'name': u''
        }
    ],
    u'descriptions': [
        {
            u'locale': u'',
            u'description': u''
        }
    ]
}

card_front_prototype = {
    u'body': buffer(''),
    u'content_type': u'',
}


card_back_prototype = {
    u'body': buffer(''),
    u'content_type': u'',
}


registry_logo_prototype = {
    u'body': buffer(''),
    u'content_type': u'',
}


def validate_competence_type(obj):
    pass


def setup():
    path = u'/competence_types'
    
    vs = qvarn.VersionedStorage()
    vs.set_resource_type(resource_type)

    vs.start_version(u'v0', None)
    vs.add_prototype(competence_type_prototype_v0)

    vs.start_version(u'v1', None)
    vs.add_prototype(competence_type_prototype_v1)
    vs.add_prototype(qvarn.listener_prototype, auxtable=u'listener')
    vs.add_prototype(
        qvarn.notification_prototype, auxtable=u'notification')

    vs.start_version(u'v2', None)
    # No changes in the base resource
    vs.add_prototype(competence_type_prototype_v1)
    vs.add_prototype(qvarn.listener_prototype, auxtable=u'listener')
    vs.add_prototype(
        qvarn.notification_prototype, auxtable=u'notification')
    vs.add_prototype(card_front_prototype, subpath=u'card_front')
    vs.add_prototype(card_back_prototype, subpath=u'card_back')
    vs.add_prototype(registry_logo_prototype, subpath=u'registry_logo')

    app = qvarn.BackendApplication()
    app.set_versioned_storage(vs)

    listener_resource = qvarn.ListenerResource()
    listener_resource.set_top_resource_path(resource_type, path)
    app.add_resource(listener_resource)

    resource = qvarn.ListResource()
    resource.set_path(path)
    resource.set_item_type(resource_type)
    resource.set_item_prototype(competence_type_prototype_current)
    resource.set_item_validator(validate_competence_type)
    resource.set_listener(listener_resource)
    app.add_resource(resource)

    card_front_resource = qvarn.FileResource()
    card_front_resource.set_item_prototype(competence_type_prototype_current)
    card_front_resource.set_top_resource_path(path)
    card_front_resource.set_item_type(resource_type)
    card_front_resource.set_file_resource_name(u'card_front')
    card_front_resource.set_listener(listener_resource)
    app.add_resource(card_front_resource)

    card_back_resource = qvarn.FileResource()
    card_back_resource.set_item_prototype(competence_type_prototype_current)
    card_back_resource.set_top_resource_path(path)
    card_back_resource.set_item_type(resource_type)
    card_back_resource.set_file_resource_name(u'card_back')
    card_back_resource.set_listener(listener_resource)
    app.add_resource(card_back_resource)

    registry_logo_resource = qvarn.FileResource()
    registry_logo_resource.set_item_prototype(
        competence_type_prototype_current)
    registry_logo_resource.set_top_resource_path(path)
    registry_logo_resource.set_item_type(resource_type)
    registry_logo_resource.set_file_resource_name(u'registry_logo')
    registry_logo_resource.set_listener(listener_resource)
    app.add_resource(registry_logo_resource)

    return app.prepare_for_uwsgi()


application = setup()
