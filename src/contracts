#!/usr/bin/env python2
#
# src/contracts.py - implement the /contracts resource
#
# Copyright 2015 Suomen Tilaajavastuu Oy
# All rights reserved.


import unifiedapi


contract_prototype = {
    u'type': u'',
    u'id': u'',
    u'revision': u'',
    u'contract_type': u'',
    u'start_date': u'',
    u'end_date': u'',
    u'contract_parties': [
        {
            u'type': u'',
            u'resource_id': u'',
            u'role': u'',
            u'contacts': [
                {
                    u'contact_type': u'',
                    u'contact_source': u'',
                    u'contact_timestamp': u'',
                    u'phone_number': u'',
                    u'email_address': u'',
                    u'full_address': u'',
                    u'country': u'',
                    u'address_lines': [u''],
                    u'post_code': u'',
                    u'post_area': u'',
                },
            ],
            u'username': u'',
            u'user_role': u'',
        },
    ],
    u'right_to_work_based_on': u''
}


class CreateContractsTables_v1(unifiedapi.StoragePreparationStep):

    def run(self, db):
        db.create_table(
            u'contract',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode),
            (u'contract_type', unicode),
            (u'start_date', unicode),
            (u'end_date', unicode),
            (u'right_to_work_based_on', unicode))

        db.create_table(
            u'contract_contract_parties',
            (u'id', unicode),
            (u'list_pos', int),
            (u'resource_id', unicode),
            (u'type', unicode),
            (u'role', unicode),
            (u'username', unicode),
            (u'user_role', unicode))

        db.create_table(
            u'contract_contract_parties_contacts',
            (u'id', unicode),
            (u'list_pos', int),
            (u'contact_type', unicode),
            (u'contact_source', unicode),
            (u'contact_timestamp', unicode),
            (u'phone_number', unicode),
            (u'email_address', unicode),
            (u'full_address', unicode),
            (u'country', unicode),
            (u'post_code', unicode),
            (u'post_area', unicode))

        db.create_table(
            u'contract_contract_parties_contacts_address_lines',
            (u'id', unicode),
            (u'dict_list_pos', int),
            (u'list_pos', int),
            (u'address-lines', unicode))

        db.create_table(
            u'contract_document',
            (u'id', unicode),
            (u'body', buffer),
            (u'content_type', unicode))

        db.create_table(
            u'contracts__listener',
            (u'type', unicode),
            (u'id', unicode),
            (u'revision', unicode),
            (u'notify_of_new', bool))

        db.create_table(
            u'contracts__listener_listen_on',
            (u'id', unicode),
            (u'list_pos', int),
            (u'listen_on', unicode))

        db.create_table(
            u'contracts__notification',
            (u'type', unicode),
            (u'id', unicode),
            (u'listener_id', unicode),
            (u'revision', unicode),
            (u'resource_id', unicode),
            (u'resource_revision', unicode),
            (u'resource_change', unicode),
            (u'last_modified', int))


class InvalidContractType(unifiedapi.ValidationError):

    msg = u'Contract {id} contract type is invalid'


class InvalidPartyType(unifiedapi.ValidationError):

    msg = u'Contract {id} contract party party type is invalid'


class InvalidRightToWorkBasedOn(unifiedapi.ValidationError):

    msg = u'Contract {id} right to work based on is invalid'


def validate_contract(obj):
    allowed_contract_types = [
        u'employment', u'induction', u'ID06_cards', u'SBCC_account'
    ]
    if obj[u'contract_type'] not in allowed_contract_types:
        raise InvalidContractType(id=obj[u'id'])

    if obj[u'contract_type'] is u'employment':
        for party in obj[u'contract_parties']:
            if party[u'role'] not in [u'employer', u'employee']:
                raise InvalidPartyType(id=obj[u'id'])

    if obj[u'contract_type'] is u'induction':
        for party in obj[u'contract_parties']:
            if party[u'role'] not in [u'inductor', u'inductee']:
                raise InvalidPartyType(id=obj[u'id'])

    if obj[u'contract_type'] is u'SBCC_account':
        for party in obj[u'contract_parties']:
            if party[u'role'] not in [u'user', u'target']:
                raise InvalidPartyType(id=obj[u'id'])

    if (obj[u'contract_type'] is u'employment' or
            obj[u'contract_type'] is u'induction'):
        allowed_rights = [u'eea_citizen', u'residence_permit', u'other']
        if obj[u'right_to_work_based_on'] not in allowed_rights:
            raise InvalidRightToWorkBasedOn(id=obj[u'id'])


if __name__ == '__main__':
    app = unifiedapi.BackendApplication()

    prep = unifiedapi.StoragePreparer(u'contract')
    prep.add_step(u'create-contracts-tables-v1', CreateContractsTables_v1())
    app.set_storage_preparer(prep)

    listener_resource = unifiedapi.ListenerResource()
    listener_resource.set_top_resource_path(u'/contracts')
    app.add_resource(listener_resource)

    resource = unifiedapi.ListResource()
    resource.set_path(u'/contracts')
    resource.set_item_type(u'contract')
    resource.set_item_prototype(contract_prototype)
    resource.set_item_validator(validate_contract)
    resource.set_listener(listener_resource)
    app.add_resource(resource)

    file_resource = unifiedapi.FileResource()
    file_resource.set_item_prototype(contract_prototype)
    file_resource.set_top_resource_path(u'/contracts')
    file_resource.set_item_type(u'contract')
    file_resource.set_file_resource_name(u'document')
    file_resource.set_listener(listener_resource)
    app.add_resource(file_resource)

    app.run()
