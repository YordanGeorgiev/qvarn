NEWS for Qvarn
==============

Version 0.82+vaultit.25.git, UNRELEASED
---------------------------------------


Version 0.82+vaultit.25, 2019-06-19
-----------------------------------

* Upgrade PyJWT to 1.7.1. Previously dev environment was using 1.6.4 and
  production environment was using a very old 1.4.1 version. 1.4.1 version had
  a Python 3 related bug, that prevented Qvarn's build-in authorization server
  to work.


Version 0.82+vaultit.24, 2019-03-26
-----------------------------------

* Added /healthcheck endpoint.

* Fix `dbconn` py.test fixture, it borke other tests, because this fixture
  always deletes whole database, while moste tests rely on session scope
  database fixture.


Version 0.82+vaultit.20, 2018-11-20
-----------------------------------

* qvarn-run scripts no longer overwrites all files in --base-dir. If file
  already exists it is left as is. token and qvarn.conf files are still
  overwritten each time, bet qvarn.conf is read before overwriting, so manually
  added changes should be left as is, unless -o option overrides it.


Version 0.82+vaultit.19, 2018-11-13
-----------------------------------

* Previously all schema migrations for all resource types was run under single
  transaction. Now that was changed, to use separate transactions for each
  resource type. This change was made, because sqlite database gave strange
  errors, that table does not exist even if create table statement was
  executed. Running each resource type migration under a separate transaction
  fixed the issue. But I still don't know why that happed.

  This change only effects sqlite database, PostgreSQL still runs under single
  transaction for all resource type migrations.

* More strict resource type YAML field checks. Now if Qvarn finds an unknown
  field type it will raise an error. Previously fields with unknown types were
  silently ignored.

* Added support for changing type of existing columns. Qvarn tries to
  automatically convert between types, but automatic conversion only works for
  really simple cases. For example if you have data "ABC" and you want to
  convert that to integer, this will fail. But if all your strings contain
  numbers, then automatic conversion will work.

  Most likely, before changing field type you will have to do manual data
  migration to prepare data for conversion.

  Currently, booleans are converted to 0 and 1, integers are converted to
  strings, bytes are converted to strings with escape symbols.

  Type conversion is only suppored on PostgreSQL, if you will try to do type
  conversion on SQLite you will get error.


Version 0.82+vaultit.18, 2018-10-26
-----------------------------------

* Full Qvarn schema migration code refactoring. Previously Qvarn did schema
  migration by renaming original tables, then creating new tables and copying
  data from original renamed to new tables. This was very slow and consumed a
  lot of memory.

  New schema migration uses `ALTER TABLE {} ADD COLUMN {}` SQL statements. This
  should work a lot faster.

  This change is backwards incompatible. Now, it is possible to only add new
  things to the schema, but it is not possible to remove. Previously, Qvarn was
  able to remove columns.

  Except this incompatibility everything else should be backwards compatible.

  After adding new columns, they are all set to NULL, same thing was before
  this refactoring.

* Now, resource type schema from yaml files is only stored if migrations are
  successful. Previously, first yaml files are pushed to database and only then
  migrations were applied.

* New all resource types are loaded on Qvarn startup to make things more
  reliable and to get possible errors sooner. Previously Qvarn added
  missing resource types on request, by detecting needed resource type from
  URL.

* Refactored sqlalchemy initialization. sqlalchemy is now used for database
  introspection during schema migration.


Version 0.82+vaultit.17, 2018-10-19
-----------------------------------

* Twine issue fix.

* Make /auth/token endpoint implementation that forwards to another server.


Version 0.82+vaultit.13, 2018-08-06
-----------------------------------

* Upgrade `cryptography` from v2.2.2 to v2.3.


Version 0.82+vaultit.12, 2018-07-10
-----------------------------------

* CoverageTestRunner was replaced by py.test + pytest-cov, and webtest
  was added for functional tests.

* Add Python 3 support.


Version 0.82+vaultit.11, 2018-06-04
-----------------------------------

* Change version scheme in order to make it work with pip and be compatible
  with PEP-440.

* Fix bug with multiple `-o` flags, where only the last one was accepted in
  `qvarn-run` and `qvarn-backend` commands.

* New `main.access_log_entry_chunk_size` configuration options was added to
  control how many ids to put into single log entry. Default chunk size was
  changed from 40 to 300.

* New `--https` option for `qvarn-run` script. Previously `qvarn-run` used
  https by default, now http is used by default, but https can be turned on
  using `--https` flag.

* Fix configuration loading using `QVARN_CONFIG`, previously `QVARN_CONFIG` was
  not respected and `--config` command line argument was used. Now this is
  fixed.

* `qvarn-run` script now runs `uwsgi` with `--http-keepalive` flag in order to
  maintain connection if client uses `Keep-Alive`. This fixes `Resetting
  dropped connection: localhost` client errors and improves performance.


Version 0.82+vaultit.10, 2018-05-25
-----------------------------------

* Fix Python packaging in order to make Qvarn pip installable.


Version 0.82-9.vaultit, 2018-05-25
----------------------------------

* Continuous integration was configured, now there all qvarn tests will run
  automatically on each push. An updated `Makefile`, `qvarn-run` and
  `run-yarn-tests` scripts automates Qvarn and it is possible to run
  integration tests using single command.

* All configuration parameters can be overriden via environment variables and
  command line arguments. Example `-o database.host=localhost`, `export
  QVARN_DATABASE_HOST=localhost`.

* Path to qvarn resource type spec files is no longer hardcoded and can be
  specified via configuration (example: `-o main.specdir=path/to/dir` or
  `qvarn-run -r path/to/dir`).

* `qvarn-run` command introduced. This command helps to run Qvarn under uwsgi
  and will take care of all the configuration needed to run Qvarn.

* `database.type` and `database.file` configuration parameters are introduced.
  Qvarn had support for sqlite database, but it was not possible run Qvarn with
  SQLite database, because sqlite was hardcoded only for tests.

  Even if possibility to run Qvarn with SQLite exists, but SQLite backend does
  not pass some yarn tests due to boolean type handling and unicode support. So
  use it at your own risk.

  `qvarn-run` command will automatically set `database.file` fi `-o
  database.type=sqlite` is set.

* New `/auth/token` API endpoint and `auth.token_private_key_file`
  configuration parameter were introduced. `/auth/token` endpoint is only
  available if `auth.token_private_key_file` is set. `qvarn-run` script
  automatically sets `auth.token_private_key_file` parameter and allows to
  get access token with client credentials. For example:

    $ http -f --verify no https://localhost:9000/auth/token
           grant_type=client_credentials scope=uapi_orgs_get

  As you can see HTTP basic auth is not given.

  `/auth/token` allows you to run qvarn without Gluu.

  But there is also possibility to run Qvarn with Gluu `qvarn-run --gluu
  https://gluu.example.com`.

* New log handlers where added `stdout`, `stdout-pretty` and `stdout-oneline`.

* Now Qvarn log to stdout while starting, previously when Qvarn is starting
  logging was turned off, hiding all startup errors.

* Qvarn now validates `main.specdir` parameter and outputs error immediately if
  some resource type definition checks did not pass. Currently it tries to load
  yaml files and checks for `type` and `path` properties.


Version 0.82-8.vaultit, released 2018-04-19
-------------------------------------------

* Include X-Forwarded-for header content in access log.
* Do not log listener requests.


Version 0.82-7.vaultit, released 2018-04-19
-------------------------------------------

* Add access logging via standard logging facilities.


Version 0.82-6.vaultit, released 2018-02-27
-------------------------------------------

* Re-open log-files after fork.


Version 0.82-5.vaultit, released 2018-02-26
-------------------------------------------

* Fixed a race condition in log file rotation.


Version 0.82-4.vaultit, released 2018-01-10
-------------------------------------------

* Added /rsort operator for sorting in descending order.


Version 0.82-3.vaultit, released 2017-09-27
-------------------------------------------

* Added /any operator.

* Fixed Qvarn initialization bug, where specs where initialized from path. In
  cases where path was not a resource type, but also contained additional
  components, like resource id, initialization failed.

* Fixed performance issue with notifications. In order to get notifications
  multiple database queries where executed and that made  notification listing
  really slow.


Version 0.82, released 2017-06-06
----------------------------------

* Added some documentation for resource type definition.

* Mantas added the /limit and /offset operators to /search. This
  should be useful for implementing pagination in API clients.

* Made the Transaction class handle exceptions when committing or
  rolling back a database transaction, and not leak database
  connections. Reported by Marius Gedminas.

* Qvarn can now log up to five log files simultanously. Each file can
  have its own filtering rules.

* Qvarn now rotates its log files as soon as they become longer than
  the specified limit. The current log file gets renamed to have a
  timestamp, and a new log file is created with the specified name.

* Qvarn now logs when it starts using a Postgres connection or stops
  using it. These are done with the log message types `get_conn` and
  `put_conn` respectively.

Version 0.81, released 2017-03-10
----------------------------------

* Mantas added sorting of results to searches.

* Lars Wirzenius has changed Qvarn to consist of a single backend
  process (`qvarn-backend`), which serves all resource types. Also,
  Qvarn now reads the resource type specifications from YAML files
  (`/etc/qvarn/*.yaml`; previously `src/*` Python scripts), and a
  single configuration file (`/etc/qvarn/qvarn.conf`). Qvarn no longer
  supports resource type specific validation code. Such functionality
  may return later by making the resource type specification language
  have a stronger type system.

  Note that resource types may not yet be managed via the API. That
  will come in the future (trouble with Gluu and limitations of its
  API prevented this from being finished; some of API code is already
  in Qvarn, but is not to be used).

  All previously existing resource types are still included with
  Qvarn. Some of the application specific ones may be dropped in the
  future, but not in this release.

  Note that deployment/provisioning needs to adapt to the above. For
  example, the qvarn-prepare systemd unit needs to use
  `/usr/bin/qvarn-backend` instead of the now-deleted
  `/usr/bin/qvarn-prepare`. Also only one config file should be
  created. uwsgi should only run one program (with a suitable number
  of threads). haproxy should only have one Qvarn backend. See
  qvarn-prov.git for an example.

Version 0.80, released 2017-02-17
----------------------------------

* Ville Niskala added a wildcard listener feature to allow listening
  on all notifications for a specific resource type. See the API
  manual for details.

Version 0.79, released 2017-01-26
----------------------------------

* Lars Wirzenius changed `slog-errors` to treat any log messages with
  a Python traceback to be errors.

* The `person` resource type has a new field `gluu_user_id`.

Version 0.78, released 2016-11-18
----------------------------------

* Ville Niskala added new resource types: `data_cache`, `files`,
  `jobs`, `resource_accesses`.

Version 0.77, released 2016-10-24
----------------------------------

* Added the `bolagsfakta_supplier` resource type, from Programmers of
  Vilnius.

* Fixed bug in Qvarn related to handling deep JSON prototypes,
  reported by Ville Niskala (Tilaajavastuu).

Version 0.76, released 2016-10-17
----------------------------------

* Fix /show so it only shows those fields that are specified (plus
  `id`).

* Validation of field values for `ID06_cards` contract types have been
  removed, in order to simplify ID06 application development.

Version 0.75, released 2016-10-12
----------------------------------

* Logging of non-UTF8 strings has been fixed. This in turn fixes
  uploads of binary files.

Version 0.74, released 2016-09-20
----------------------------------

* The structured log of Qvarn now includes log messages from the
  standard Python logging library. This is useful when the bottle.py
  framework or one of the library Qvarn uses emits log messags of its
  own. They now all end up in the same structured log file as Qvarn's
  own messages.

* Qvarn's HTTP responses now have a `Date:` header. Thanks to Teemu
  Kääriäinen for reporting the issue.

* A fix to `/search` by Ville Niskala. The bug caused OR conditions to
  fail if there were no corresponding rows in a joined table.

* New `/search` operators: `contains`, `startswith`, and `show`. The
  former follow the pattern of `exact`, but `show` takes a single
  parameter, which is a top-level field name and includes that field
  in the response. It may be used multiple times.

* Updates to the contracts and competence type resources, by Ville
  Niskala.

Version 0.73, released 2016-07-27
----------------------------------

Bug fixes:

* Qvarn now fails to start if its configuration lacks the fields to
  check authentication (i.e., checking the validity of access tokens).
  This means configuration files now MUST define `token_issuer` and
  `token_validation_key`. If they're not set, Qvarn doesn't start.
  This prevents accidentally running Qvarn in an insecure mode.

* The "competence type" resource is now systematically spelled with an
  underscore ("competence_types") instead of sometimes using a dash.
  This prevents much confusion and error.

Small changes:

* Manuals are now built using `qvdoc`, with Qvarn logo and everything.
  Also, Qvarn version is now used as document version.

* The single structured log message of type `critical` is now `error`,
  like all other errors.

* `slog-error` considers a HTTP status code of 400 or greater to
  indicate a failure. Previously it was 500 or greater.

* `slog-error` reports the filename from which it gets the log
  messages it reports.

* Debian packaging for Qvarn now depends on `python-yaml`.

Developer-only changes:

* Many code cleanups. Hopefully no bugs introduced (tests still pass).
  Most importantly, `src/*` are now using shared code
  (`ResourceServer`) to set up an application, based on a data
  description. The description still needs to be Python code in `src`,
  but this is a big step towards liberating Qvarn installations to
  specify the resources they need via configuration files.

* The source tree no longer has obsolete configuration file snippets.

Version 0.72, released 2016-07-05
----------------------------------

* The `/version` now reports the correct version number.

* Qvarn now uses structured logs. These are logs where each line is in
  JSON. See the `slog-pretty` and `slog-errors` utilities for reading
  such logs. Logs (in JSON) may also be sent to syslog by configuring
  main.log variable as `syslog`.

* Resources can now have a structure that is one depth deeper than
  before, and Qvarn gives an error if they're too deep. Thanks to
  Ville Niskala for reporting the problem.

Version 0.71, released 2016-05-26
----------------------------------

* Some source code cleanups have been made to placate the pylint tool.
  This should not be visible to users.

* Put back the `org.is_luotettava_kumppani_member` field, which got
  dropped earlier. A client application is using it and it's faster to
  un-break Qvarn by adding the field than to ask them to fix their
  end. We'll re-remove the field later, at a more opportune moment.

Version 0.70, released 2016-05-25
----------------------------------

* Improve speed of searches by dropping the previous approach
  (COUNT(id) turns out to be slow in Postgres) and using INNER JOIN
  instead. By Ville Niskala.

Version 0.69, released 2016-05-24
----------------------------------

* Attempt to improve the speed of search queries, by Ville Niskala.
  This version attempts to avoid unnecessary queries, and to implement
  an AND between conditions in a more efficient way. However, this
  hasn't been benchmarked yet: this release is to enable benchmarks to
  be run.

Version 0.68, released 2016-05-23
----------------------------------

* No-change release, to trigger a new build. Sorry.

Version 0.67, released 2016-05-23
----------------------------------

* Missing build dependencies added to Debian packaging.

Version 0.66, released 2016-05-23
----------------------------------

* This is the first release with a NEWS file.
